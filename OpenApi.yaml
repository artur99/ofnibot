swagger: "2.0"
info:
  description: "This is a bot for identifying movies/songs by name or products by Barcode & tools"
  version: "1.0.0"
  title: "Ofnibot"
  license:
    name: "CC0 1.0"
    url: "https://creativecommons.org/publicdomain/zero/1.0/"
host: "ofnibot.local"
basePath: "/api/1"
tags:
- name: "movies"
  description: "Similar movies to search by a certain movie name"
schemes:
- "http"
paths:
  /movies:
    post:
      tags:
      - "movies"
      summary: "Search for similar movies by a movie name"
      description: ""
      operationId: "getMovie"
      produces:
      - "application/json"
      - "text/yaml"
      parameters:
      - name: "name"
        in: "query"
        description: "The movie name to search for"
        required: true
        type: "string"
      - name: "pretty"
        in: "query"
        description: "Whenever the code to be prettified or not\n\nDefault: (false)"
        required: false
        type: "boolean"
      - name: "sortByScore"
        in: "query"
        description: "If to sort the results by the User Score\n\nDefault: (false)"
        required: false
        type: "boolean"
      - name: "limit"
        in: "query"
        description: "A maximum number of similar movies to be returned\n\nDefault: (false)"
        required: false
        type: "integer"
      responses:
        200:
          description: "Succesful operation"
          schema:
            $ref: "#/definitions/Movies"
        405:
          description: "Invalid input"
        404:
          description: "Movie not found"
  /songs:
    post:
      tags:
      - "song"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        description: "The song name to search for"
        required: true
        type: "string"
      - name: "pretty"
        in: "query"
        description: "Whenever the code to be prettified or not\n\nDefault: (false)"
        required: false
        type: "boolean"
      - name: "sortByScore"
        in: "query"
        description: "If to sort the results by the User Score\n\nDefault: (false)"
        required: false
        type: "boolean"
      - name: "limit"
        in: "query"
        description: "A maximum number of similar songs to be returned\n\nDefault: (false)"
        required: false
        type: "integer"
      responses:
        200:
          description: "Succesful operation"
          schema:
            $ref: "#/definitions/Songs"
        405:
          description: "Invalid input"
        404:
          description: "Song not found"
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Movies:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Songs:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Pet:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Pet"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
